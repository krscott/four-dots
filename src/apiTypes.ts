/* eslint-disable linebreak-style, indent */
// Auto-generated by api_typer

export type AppState = (
	{ var: "Title" } |
	{ var: "SelectDifficulty" } |
	{ var: "GameVsBot", vardata: GameBoardState } |
	{ var: "GameVsPlayer", vardata: GameBoardState }
)

export const AppStateTitleVar = "Title"
export const AppStateSelectDifficultyVar = "SelectDifficulty"
export const AppStateGameVsBotVar = "GameVsBot"
export const AppStateGameVsPlayerVar = "GameVsPlayer"

export function matchAppState<T>(x: AppState, arms: {
	Title: () => T,
	SelectDifficulty: () => T,
	GameVsBot: (vardata: GameBoardState) => T,
	GameVsPlayer: (vardata: GameBoardState) => T,
}): T {
	switch (x.var) {
		case "Title": return arms.Title()
		case "SelectDifficulty": return arms.SelectDifficulty()
		case "GameVsBot": return arms.GameVsBot(x.vardata)
		case "GameVsPlayer": return arms.GameVsPlayer(x.vardata)
	}
}


export interface GameBoardState {
	tick: number,
	player1_input: InputType,
	player2_input: InputType,
	cells: Array<Cell>,
	width: number,
	height: number,
	current_player: Player,
	winning_segment: Segment | null,
	player1_score: number,
	player2_score: number,
}

export type InputType = (
	{ var: "Local" } |
	{ var: "Bot", vardata:  {
		difficulty: Difficulty,
	} }
)

export const InputTypeLocalVar = "Local"
export const InputTypeBotVar = "Bot"

export function matchInputType<T>(x: InputType, arms: {
	Local: () => T,
	Bot: (vardata: {
		difficulty: Difficulty,
	}) => T,
}): T {
	switch (x.var) {
		case "Local": return arms.Local()
		case "Bot": return arms.Bot(x.vardata)
	}
}


export type Cell = (
	{ var: "Empty" } |
	{ var: "Player1Piece" } |
	{ var: "Player2Piece" }
)

export const CellEmptyVar = "Empty"
export const CellPlayer1PieceVar = "Player1Piece"
export const CellPlayer2PieceVar = "Player2Piece"

export function matchCell<T>(x: Cell, arms: {
	Empty: () => T,
	Player1Piece: () => T,
	Player2Piece: () => T,
}): T {
	switch (x.var) {
		case "Empty": return arms.Empty()
		case "Player1Piece": return arms.Player1Piece()
		case "Player2Piece": return arms.Player2Piece()
	}
}


export type Player = (
	{ var: "Player1" } |
	{ var: "Player2" }
)

export const PlayerPlayer1Var = "Player1"
export const PlayerPlayer2Var = "Player2"

export function matchPlayer<T>(x: Player, arms: {
	Player1: () => T,
	Player2: () => T,
}): T {
	switch (x.var) {
		case "Player1": return arms.Player1()
		case "Player2": return arms.Player2()
	}
}


export interface Segment {
	player: Player,
	points: Array<Point>,
}

export interface Point {
	x: number,
	y: number,
}

export type Difficulty = (
	{ var: "Easy" } |
	{ var: "Medium" } |
	{ var: "Hard" } |
	{ var: "Expert" }
)

export const DifficultyEasyVar = "Easy"
export const DifficultyMediumVar = "Medium"
export const DifficultyHardVar = "Hard"
export const DifficultyExpertVar = "Expert"

export function matchDifficulty<T>(x: Difficulty, arms: {
	Easy: () => T,
	Medium: () => T,
	Hard: () => T,
	Expert: () => T,
}): T {
	switch (x.var) {
		case "Easy": return arms.Easy()
		case "Medium": return arms.Medium()
		case "Hard": return arms.Hard()
		case "Expert": return arms.Expert()
	}
}

