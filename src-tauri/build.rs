#[cfg(windows)]
extern crate winres;

use std::env;
use std::fs;
use std::path::Path;

use api_typer::{ApiSpec, RustTyper, TypescriptTyper};

#[cfg(windows)]
fn main() {
    if std::path::Path::new("icons/icon.ico").exists() {
        let mut res = winres::WindowsResource::new();
        res.set_icon_with_id("icons/icon.ico", "32512");
        res.compile().expect("Unable to find visual studio tools");
    } else {
        panic!("No Icon.ico found. Please add one or check the path");
    }

    build_api()
}

#[cfg(not(windows))]
fn main() {
    generate_api()
}

fn build_api() {
    if env::var("BUILD_API").is_ok() {
        let api_types_path = Path::new("src/api_types.yml");
        let rust_path = Path::new("src/api_types.rs");
        let ts_path = Path::new("../src/apiTypes.ts");

        let rust_header = "// Auto-generated by api_typer\n\n";
        let ts_header = "\
        /* eslint-disable linebreak-style */\n\
        // Auto-generated by api_typer\n\n";

        let file = fs::File::open(&api_types_path).expect("could not open API Types file");
        let spec: ApiSpec = serde_yaml::from_reader(file).unwrap();

        let rust_code = format!("{}{}\n", rust_header, spec.to_rust());
        fs::write(&rust_path, rust_code).unwrap();

        let ts_code = format!("{}{}\n", ts_header, spec.to_typescript());
        fs::write(&ts_path, ts_code).unwrap();
    }
}
